"use strict";

var _ava = _interopRequireDefault(require("ava"));

var _dev = _interopRequireDefault(require("./dev"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const callback = (context = null, req) => req;

(0, _ava.default)('Handles /', t => {
  // mock params
  const event = {
    Records: [{
      cf: {
        request: {
          uri: '/'
        }
      }
    }]
  };

  const request = _dev.default.handler(event, null, callback);

  t.is(request.uri, '/index.html');
});
(0, _ava.default)('Handles Agent docs', t => {
  // mock params
  const event = {
    Records: [{
      cf: {
        request: {
          uri: '/agent'
        }
      }
    }]
  };

  const request = _dev.default.handler(event, null, callback);

  t.is(request.status, '302');
  t.is(request.headers.location[0].value.indexOf('agent/index.html') > 0, true);
});
(0, _ava.default)('Handles API docs', t => {
  // mock params
  const event = {
    Records: [{
      cf: {
        request: {
          uri: '/api'
        }
      }
    }]
  };

  const request = _dev.default.handler(event, null, callback);

  t.is(request.status, '302');
  t.is(request.headers.location[0].value.indexOf('api/index.html') > 0, true);
});
(0, _ava.default)('Handles Matlab docs', t => {
  // mock params
  const event = {
    Records: [{
      cf: {
        request: {
          uri: '/matlab'
        }
      }
    }]
  };

  const request = _dev.default.handler(event, null, callback);

  t.is(request.status, '302');
  t.is(request.headers.location[0].value.indexOf('matlab/index.html') > 0, true);
});
(0, _ava.default)('Handles Python docs', t => {
  // mock params
  const event = {
    Records: [{
      cf: {
        request: {
          uri: '/python'
        }
      }
    }]
  };

  const request = _dev.default.handler(event, null, callback);

  t.is(request.status, '302');
  t.is(request.headers.location[0].value.indexOf('python/index.html') > 0, true);
});
(0, _ava.default)('Handles missing request objects', t => {
  // mock params
  const event = {
    Records: [{
      cf: {}
    }]
  };

  const request = _dev.default.handler(event, null, callback);

  t.deepEqual(request, {}); // mock params

  const event2 = {
    Records: []
  };

  const request2 = _dev.default.handler(event2, null, callback);

  t.deepEqual(request2, {}); // mock params

  const event3 = {
    Records: []
  };

  const request3 = _dev.default.handler(event3, null, callback);

  t.deepEqual(request3, {});
});
//# sourceMappingURL=/Users/joost/Code/pennsieve/developer.pennsieve.io/directory-index-lambda-edge/node_modules/.cache/ava/b97fdc0c3af402cd89925fcbd13c13c0.js.map