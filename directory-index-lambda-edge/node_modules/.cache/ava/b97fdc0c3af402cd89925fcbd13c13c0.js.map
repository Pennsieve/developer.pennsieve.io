{"version":3,"sources":["dev.spec.js"],"names":["callback","context","req","t","event","Records","cf","request","uri","lambda","handler","is","status","headers","location","value","indexOf","deepEqual","event2","request2","event3","request3"],"mappings":"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","sourceRoot":"/Users/joost/Code/pennsieve/developer.pennsieve.io/directory-index-lambda-edge","sourcesContent":["import test from 'ava';\nimport lambda from './dev';\n\nconst callback = (context=null, req) => req;\n\ntest('Handles /', t => {\n\t// mock params\n    const event = {\n        Records: [\n            {\n                cf: {\n                    request: {\n                        uri: '/'\n                    }\n                }\n            }\n        ]\n    }\n    const request = lambda.handler(event, null, callback);\n    t.is(request.uri, '/index.html');\n});\n\ntest('Handles Agent docs', t => {\n\t// mock params\n    const event = {\n        Records: [\n            {\n                cf: {\n                    request: {\n                        uri: '/agent'\n                    }\n                }\n            }\n        ]\n    }\n    const request = lambda.handler(event, null, callback);\n    t.is(request.status, '302');\n    t.is(request.headers.location[0].value.indexOf('agent/index.html') > 0, true);\n});\n\ntest('Handles API docs', t => {\n\t// mock params\n    const event = {\n        Records: [\n            {\n                cf: {\n                    request: {\n                        uri: '/api'\n                    }\n                }\n            }\n        ]\n    }\n    const request = lambda.handler(event, null, callback);\n    t.is(request.status, '302');\n    t.is(request.headers.location[0].value.indexOf('api/index.html') > 0, true);\n});\n\ntest('Handles Matlab docs', t => {\n\t// mock params\n    const event = {\n        Records: [\n            {\n                cf: {\n                    request: {\n                        uri: '/matlab'\n                    }\n                }\n            }\n        ]\n    }\n    const request = lambda.handler(event, null, callback);\n    t.is(request.status, '302');\n    t.is(request.headers.location[0].value.indexOf('matlab/index.html') > 0, true);\n});\n\ntest('Handles Python docs', t => {\n\t// mock params\n    const event = {\n        Records: [\n            {\n                cf: {\n                    request: {\n                        uri: '/python'\n                    }\n                }\n            }\n        ]\n    }\n    const request = lambda.handler(event, null, callback);\n    t.is(request.status, '302');\n    t.is(request.headers.location[0].value.indexOf('python/index.html') > 0, true);\n});\n\ntest('Handles missing request objects', t => {\n    // mock params\n    const event = {\n        Records: [\n            {\n                cf: {}\n            }\n        ]\n    }\n    const request = lambda.handler(event, null, callback);\n    t.deepEqual(request, {});\n\n    // mock params\n    const event2 = {\n        Records: []\n    }\n    const request2 = lambda.handler(event2, null, callback);\n    t.deepEqual(request2, {});\n\n    // mock params\n    const event3 = {\n        Records: []\n    }\n    const request3 = lambda.handler(event3, null, callback);\n    t.deepEqual(request3, {});\n});\n"]}